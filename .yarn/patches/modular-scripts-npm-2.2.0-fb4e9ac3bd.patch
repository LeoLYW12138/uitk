diff --git a/dist-cjs/build/buildPackage/makeBundle.js b/dist-cjs/build/buildPackage/makeBundle.js
index e5757c4559d108be267057bed4b08e859c4bb3f6..2656c99a5744d314ae33bce490ea86f6027c7306 100644
--- a/dist-cjs/build/buildPackage/makeBundle.js
+++ b/dist-cjs/build/buildPackage/makeBundle.js
@@ -101,7 +101,9 @@ async function makeBundle(target, preserveModules, includePrivate) {
       }], [require.resolve('@babel/preset-typescript'), {
         isTSX: true,
         allExtensions: true
-      }], require.resolve('@babel/preset-react')],
+      }], [require.resolve('@babel/preset-react'), {
+        runtime: 'automatic'
+      }]],
       plugins: [require.resolve('@babel/plugin-proposal-class-properties')],
       extensions,
       include: [`packages/**/*`],
diff --git a/dist-cjs/build/buildPackage/makeBundle.js.map b/dist-cjs/build/buildPackage/makeBundle.js.map
index f9c5f82555552fab502b10e5d4ef18b740140470..2d1b48f6de07943c21d380476089f3cf07715873 100644
--- a/dist-cjs/build/buildPackage/makeBundle.js.map
+++ b/dist-cjs/build/buildPackage/makeBundle.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../../src/build/buildPackage/makeBundle.ts"],"names":["outputDirectory","extensions","distinct","arr","Set","makeBundle","target","preserveModules","includePrivate","modularRoot","metadata","rootPackageJsonDependencies","packageJsons","packageJsonsByPackagePath","packageNames","paramCaseTarget","packagePath","targetOutputDirectory","path","join","logger","packageJson","main","log","bundle","rollup","input","external","id","startsWith","isAbsolute","treeshake","propertyReadSideEffects","plugins","browser","mainFields","include","babelHelpers","presets","require","resolve","targets","esmodules","isTSX","allExtensions","exclude","extract","absolutePackagePath","outputOptions","freeze","sourcemap","sourcemapPathTransform","relativeSourcePath","sourceMapPath","absoluteSourcepath","dirname","packageRelativeSourcePath","relative","output","generate","localImports","localFileNames","missingDependencies","chunkOrAssetFileNames","map","chunkOfAsset","fileName","chunkOrAsset","type","imported","imports","dynamicImports","importedPath","split","importedPackage","includes","extname","error","private","version","Error","dependencies","peerDependencies","builtinModules","has","add","Object","keys","length","entries","forEach","packageName","packageVersion","chalk","green","missingDependenciesWithoutLocalFileNames","filter","dep","missingImport","buildOutput","write","dir","file","format","exports","outputPath","posix","module","typings","replace","files"],"mappings":"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","sourcesContent":["import { paramCase as toParamCase } from 'change-case';\nimport * as path from 'path';\nimport builtinModules from 'builtin-modules';\nimport chalk from 'chalk';\n\nimport * as rollup from 'rollup';\nimport { preserveShebangs } from 'rollup-plugin-preserve-shebangs';\nimport babel from '@rollup/plugin-babel';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\nimport postcss from 'rollup-plugin-postcss';\nimport resolve from '@rollup/plugin-node-resolve';\n\nimport { getPackageEntryPoints } from './getPackageEntryPoints';\n\nimport getPrefixedLogger from '../../utils/getPrefixedLogger';\nimport getPackageMetadata from '../../utils/getPackageMetadata';\nimport getModularRoot from '../../utils/getModularRoot';\nimport { ModularPackageJson } from '../../utils/isModularType';\nimport getRelativeLocation from '../../utils/getRelativeLocation';\n\nconst outputDirectory = 'dist';\nconst extensions = ['.ts', '.tsx', '.js', '.jsx'];\n\nfunction distinct<T>(arr: T[]): T[] {\n  return [...new Set(arr)];\n}\n\nexport async function makeBundle(\n  target: string,\n  preserveModules: boolean,\n  includePrivate: boolean,\n): Promise<ModularPackageJson> {\n  const modularRoot = getModularRoot();\n  const metadata = await getPackageMetadata();\n  const {\n    rootPackageJsonDependencies,\n    packageJsons,\n    packageJsonsByPackagePath,\n    packageNames,\n  } = metadata;\n\n  const paramCaseTarget = toParamCase(target);\n  const packagePath = await getRelativeLocation(target);\n  const targetOutputDirectory = path.join(\n    modularRoot,\n    outputDirectory,\n    paramCaseTarget,\n  );\n\n  const logger = getPrefixedLogger(target);\n\n  const packageJson = packageJsonsByPackagePath[packagePath];\n\n  const main = await getPackageEntryPoints(packagePath, includePrivate);\n\n  logger.log(`building ${target}...`);\n\n  const bundle = await rollup.rollup({\n    input: path.join(modularRoot, packagePath, main),\n    external: (id) => {\n      // via tsdx\n      // TODO: this should probably be included into deps instead\n      if (id === 'babel-plugin-transform-async-to-promises/helpers') {\n        // we want to inline these helpers\n        return false;\n      }\n      // exclude any dependency that's not a realtive import\n      return !id.startsWith('.') && !path.isAbsolute(id);\n    },\n    treeshake: {\n      // via tsdx: Don't use getters and setters on plain objects.\n      propertyReadSideEffects: false,\n    },\n    plugins: [\n      resolve({\n        extensions,\n        browser: true,\n        mainFields: ['module', 'main', 'browser'],\n      }),\n      commonjs({ include: /\\/node_modules\\// }),\n      babel({\n        babelHelpers: 'bundled',\n        presets: [\n          // Preset orders matters, please see: https://github.com/babel/babel/issues/8752#issuecomment-486541662\n          [\n            require.resolve('@babel/preset-env'),\n            // TODO: why doesn't this read `targets` from package.json?\n            {\n              targets: {\n                // We should be building packages for environments which support esmodules given their wide support now.\n                esmodules: true,\n              },\n            },\n          ],\n          [\n            require.resolve('@babel/preset-typescript'),\n            { isTSX: true, allExtensions: true },\n          ],\n          require.resolve('@babel/preset-react'),\n        ],\n        plugins: [require.resolve('@babel/plugin-proposal-class-properties')],\n        extensions,\n        include: [`packages/**/*`],\n        exclude: 'node_modules/**',\n      }),\n      postcss({ extract: false }),\n      // TODO: add sass, dotenv\n      json(),\n      preserveShebangs(),\n    ],\n    // TODO: support for css modules, sass, dotenv,\n    // and anything else create-react-app supports\n    // (alternatively, disable support for those in apps)\n  });\n\n  const absolutePackagePath = path.join(modularRoot, packagePath);\n\n  const outputOptions: rollup.OutputOptions = {\n    freeze: false,\n    sourcemap: true, // TODO: read this off env\n    sourcemapPathTransform(relativeSourcePath: string, sourceMapPath: string) {\n      // make source map input files relative to the `${packagePath}/dist-${format}` within\n      // the package directory\n\n      const absoluteSourcepath = path.resolve(\n        path.dirname(sourceMapPath),\n        relativeSourcePath,\n      );\n      const packageRelativeSourcePath = path.relative(\n        absolutePackagePath,\n        absoluteSourcepath,\n      );\n\n      return `../${packageRelativeSourcePath}`;\n    },\n  };\n\n  // we're going to use bundle.write() to actually generate the\n  // output files, but first we're going to do a scan\n  // to validate dependencies and collect some metadata for later\n  const { output } = await bundle.generate(outputOptions);\n  // TODO: we should use this loop to generate the files itself\n  // to avoid the second scan, but it's ok for now I guess.\n  // \"local\" workspaces/packages that were imported, i.e - packages/*\n  const localImports: { [name: string]: string } = {};\n\n  // this is used to collect local filenames being referenced\n  // to prevent errors where facades are imported as dependencies\n  // and are collected in missingDependencies\n  const localFileNames = new Set<string>();\n\n  // imports that aren't defined in package.json or root package.json\n  // Now, this will also mark dependencies that were transient/nested,\n  // but I think that's the right choice; a dependency might remove it,\n  // even in a patch, and it'll break your code and you wouldn't know why.\n  const missingDependencies: Set<string> = new Set();\n\n  // get all the names of the files we outputted to make sure they're included\n  // in the missing dep check\n  const chunkOrAssetFileNames = new Set<string>(\n    output.map((chunkOfAsset) => chunkOfAsset.fileName),\n  );\n\n  for (const chunkOrAsset of output) {\n    if (chunkOrAsset.type === 'asset') {\n      // TODO: what should happen here?\n    } else {\n      // it's a 'chunk' of source code, let's analyse it\n      for (const imported of [\n        ...chunkOrAsset.imports,\n        ...chunkOrAsset.dynamicImports,\n      ]) {\n        // get the dependency (without references any inner modules)\n        const importedPath = imported.split('/');\n        const importedPackage =\n          // scoped package?\n          importedPath[0][0] === '@'\n            ? `${importedPath[0]}/${importedPath[1]}`\n            : // non-scoped\n              importedPath[0];\n\n        if (\n          importedPackage !== imported &&\n          packageNames.includes(importedPackage) &&\n          // it's fine if it's anything but a js file\n          extensions.includes(path.extname(imported))\n        ) {\n          // TODO: revisit this if and when we have support for multiple entrypoints\n          // TODO: add a line number and file name here\n          logger.error(\n            `cannot import a submodule ${imported} from ${importedPackage}`,\n          );\n          // TODO: This could probably be an error, but\n          // let's revisit it when we have a better story.\n        }\n\n        if (packageJsons[importedPackage]) {\n          // This means we're importing from a local workspace\n          // Let's collect the name and add it in the package.json\n          // we publish to the registry\n          // TODO: make sure local workspaces are NOT explicitly included in package.json\n          if (packageJsons[importedPackage].private !== true) {\n            localImports[importedPackage] = packageJsons[importedPackage]\n              .version as string;\n          } else {\n            throw new Error(\n              `referencing a private package: ${importedPackage}`,\n            ); // TODO - lineNo, filename\n          }\n        } else {\n          // remote\n          if (\n            // not mentioned in the local package.json\n            !packageJson.dependencies?.[importedPackage] &&\n            !packageJson.peerDependencies?.[importedPackage]\n          ) {\n            if (rootPackageJsonDependencies[importedPackage]) {\n              localImports[importedPackage] =\n                rootPackageJsonDependencies[importedPackage];\n            } else {\n              // not mentioned in the root package.json either, so\n              // let's collect its name and throw an error later\n              // TODO: if it's in root's dev dependencies, should throw a\n              // different kind of error\n              if (\n                !builtinModules.includes(importedPackage) &&\n                // In the case that the importedPackage is contained in the\n                // files outputted by the bundle write then the import name\n                // is a dynamic import which generated a file split. This is\n                // perfectly file since we know the file exists from the bundle\n                // write phase.\n                !chunkOrAssetFileNames.has(importedPackage)\n              ) {\n                // save filename to remove from missingDeps later\n                // if they exist there\n                localFileNames.add(chunkOrAsset.fileName);\n                missingDependencies.add(importedPackage);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (Object.keys(localImports).length > 0) {\n    logger.log('Adding dependencies to the generated package.json:');\n    Object.entries(localImports).forEach(([packageName, packageVersion]) => {\n      logger.log(`\\t${packageName}: ${chalk.green(packageVersion)}`);\n    });\n  }\n\n  // remove local filenames from missingDependencies\n  const missingDependenciesWithoutLocalFileNames = [\n    ...missingDependencies,\n  ].filter((dep) => !localFileNames.has(dep));\n\n  if (missingDependenciesWithoutLocalFileNames.length > 0) {\n    missingDependenciesWithoutLocalFileNames.forEach((missingImport) => {\n      logger.error(`  ${missingImport}`);\n    });\n    throw new Error(`Missing dependencies found.`);\n  }\n\n  // now actually write the bundles to disk\n  // TODO: write to disk in the above check itself to prevent this 2nd pass\n  const { output: buildOutput } = await bundle.write({\n    ...outputOptions,\n    ...(preserveModules\n      ? {\n          preserveModules: true,\n          dir: path.join(targetOutputDirectory, `${outputDirectory}-cjs`),\n        }\n      : {\n          file: path.join(\n            targetOutputDirectory,\n            `${outputDirectory}-cjs`,\n            paramCaseTarget + '.cjs.js',\n          ),\n        }),\n    format: 'cjs',\n    exports: 'auto',\n  });\n\n  await bundle.write({\n    ...outputOptions,\n    ...(preserveModules\n      ? {\n          preserveModules: true,\n          dir: path.join(targetOutputDirectory, `${outputDirectory}-es`),\n        }\n      : {\n          file: path.join(\n            targetOutputDirectory,\n            `${outputDirectory}-es`,\n            paramCaseTarget + '.es.js',\n          ),\n        }),\n    format: 'es',\n    exports: 'auto',\n  });\n\n  const outputPath = buildOutput[0].fileName;\n\n  // return the public facing package.json that we'll write to disk later\n  return {\n    ...packageJson,\n    main: preserveModules\n      ? path.posix.join(`${outputDirectory}-cjs`, outputPath)\n      : `${outputDirectory}-cjs/${paramCaseTarget + '.cjs.js'}`,\n    module: preserveModules\n      ? path.posix.join(`${outputDirectory}-es`, outputPath)\n      : `${outputDirectory}-es/${paramCaseTarget + '.es.js'}`,\n    typings: path.posix.join(\n      `${outputDirectory}-types`,\n      path.posix.relative('src', main).replace(/\\.tsx?$/, '.d.ts'),\n    ),\n    dependencies: {\n      ...packageJson.dependencies,\n      ...localImports,\n    },\n    files: distinct([\n      ...(packageJson.files || []),\n      'dist-cjs',\n      'dist-es',\n      'dist-types',\n      'README.md',\n    ]),\n  };\n}\n"],"file":"makeBundle.js"}
\ No newline at end of file
+{"version":3,"sources":["../../../src/build/buildPackage/makeBundle.ts"],"names":["outputDirectory","extensions","distinct","arr","Set","makeBundle","target","preserveModules","includePrivate","modularRoot","metadata","rootPackageJsonDependencies","packageJsons","packageJsonsByPackagePath","packageNames","paramCaseTarget","packagePath","targetOutputDirectory","path","join","logger","packageJson","main","log","bundle","rollup","input","external","id","startsWith","isAbsolute","treeshake","propertyReadSideEffects","plugins","browser","mainFields","include","babelHelpers","presets","require","resolve","targets","esmodules","isTSX","allExtensions","runtime","exclude","extract","absolutePackagePath","outputOptions","freeze","sourcemap","sourcemapPathTransform","relativeSourcePath","sourceMapPath","absoluteSourcepath","dirname","packageRelativeSourcePath","relative","output","generate","localImports","localFileNames","missingDependencies","chunkOrAssetFileNames","map","chunkOfAsset","fileName","chunkOrAsset","type","imported","imports","dynamicImports","importedPath","split","importedPackage","includes","extname","error","private","version","Error","dependencies","peerDependencies","builtinModules","has","add","Object","keys","length","entries","forEach","packageName","packageVersion","chalk","green","missingDependenciesWithoutLocalFileNames","filter","dep","missingImport","buildOutput","write","dir","file","format","exports","outputPath","posix","module","typings","replace","files"],"mappings":"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","sourcesContent":["import { paramCase as toParamCase } from 'change-case';\nimport * as path from 'path';\nimport builtinModules from 'builtin-modules';\nimport chalk from 'chalk';\n\nimport * as rollup from 'rollup';\nimport { preserveShebangs } from 'rollup-plugin-preserve-shebangs';\nimport babel from '@rollup/plugin-babel';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\nimport postcss from 'rollup-plugin-postcss';\nimport resolve from '@rollup/plugin-node-resolve';\n\nimport { getPackageEntryPoints } from './getPackageEntryPoints';\n\nimport getPrefixedLogger from '../../utils/getPrefixedLogger';\nimport getPackageMetadata from '../../utils/getPackageMetadata';\nimport getModularRoot from '../../utils/getModularRoot';\nimport { ModularPackageJson } from '../../utils/isModularType';\nimport getRelativeLocation from '../../utils/getRelativeLocation';\n\nconst outputDirectory = 'dist';\nconst extensions = ['.ts', '.tsx', '.js', '.jsx'];\n\nfunction distinct<T>(arr: T[]): T[] {\n  return [...new Set(arr)];\n}\n\nexport async function makeBundle(\n  target: string,\n  preserveModules: boolean,\n  includePrivate: boolean,\n): Promise<ModularPackageJson> {\n  const modularRoot = getModularRoot();\n  const metadata = await getPackageMetadata();\n  const {\n    rootPackageJsonDependencies,\n    packageJsons,\n    packageJsonsByPackagePath,\n    packageNames,\n  } = metadata;\n\n  const paramCaseTarget = toParamCase(target);\n  const packagePath = await getRelativeLocation(target);\n  const targetOutputDirectory = path.join(\n    modularRoot,\n    outputDirectory,\n    paramCaseTarget,\n  );\n\n  const logger = getPrefixedLogger(target);\n\n  const packageJson = packageJsonsByPackagePath[packagePath];\n\n  const main = await getPackageEntryPoints(packagePath, includePrivate);\n\n  logger.log(`building ${target}...`);\n\n  const bundle = await rollup.rollup({\n    input: path.join(modularRoot, packagePath, main),\n    external: (id) => {\n      // via tsdx\n      // TODO: this should probably be included into deps instead\n      if (id === 'babel-plugin-transform-async-to-promises/helpers') {\n        // we want to inline these helpers\n        return false;\n      }\n      // exclude any dependency that's not a realtive import\n      return !id.startsWith('.') && !path.isAbsolute(id);\n    },\n    treeshake: {\n      // via tsdx: Don't use getters and setters on plain objects.\n      propertyReadSideEffects: false,\n    },\n    plugins: [\n      resolve({\n        extensions,\n        browser: true,\n        mainFields: ['module', 'main', 'browser'],\n      }),\n      commonjs({ include: /\\/node_modules\\// }),\n      babel({\n        babelHelpers: 'bundled',\n        presets: [\n          // Preset orders matters, please see: https://github.com/babel/babel/issues/8752#issuecomment-486541662\n          [\n            require.resolve('@babel/preset-env'),\n            // TODO: why doesn't this read `targets` from package.json?\n            {\n              targets: {\n                // We should be building packages for environments which support esmodules given their wide support now.\n                esmodules: true,\n              },\n            },\n          ],\n          [\n            require.resolve('@babel/preset-typescript'),\n            { isTSX: true, allExtensions: true },\n          ],\n          [require.resolve('@babel/preset-react'), { runtime: 'automatic' }],\n        ],\n        plugins: [require.resolve('@babel/plugin-proposal-class-properties')],\n        extensions,\n        include: [`packages/**/*`],\n        exclude: 'node_modules/**',\n      }),\n      postcss({ extract: false }),\n      // TODO: add sass, dotenv\n      json(),\n      preserveShebangs(),\n    ],\n    // TODO: support for css modules, sass, dotenv,\n    // and anything else create-react-app supports\n    // (alternatively, disable support for those in apps)\n  });\n\n  const absolutePackagePath = path.join(modularRoot, packagePath);\n\n  const outputOptions: rollup.OutputOptions = {\n    freeze: false,\n    sourcemap: true, // TODO: read this off env\n    sourcemapPathTransform(relativeSourcePath: string, sourceMapPath: string) {\n      // make source map input files relative to the `${packagePath}/dist-${format}` within\n      // the package directory\n\n      const absoluteSourcepath = path.resolve(\n        path.dirname(sourceMapPath),\n        relativeSourcePath,\n      );\n      const packageRelativeSourcePath = path.relative(\n        absolutePackagePath,\n        absoluteSourcepath,\n      );\n\n      return `../${packageRelativeSourcePath}`;\n    },\n  };\n\n  // we're going to use bundle.write() to actually generate the\n  // output files, but first we're going to do a scan\n  // to validate dependencies and collect some metadata for later\n  const { output } = await bundle.generate(outputOptions);\n  // TODO: we should use this loop to generate the files itself\n  // to avoid the second scan, but it's ok for now I guess.\n  // \"local\" workspaces/packages that were imported, i.e - packages/*\n  const localImports: { [name: string]: string } = {};\n\n  // this is used to collect local filenames being referenced\n  // to prevent errors where facades are imported as dependencies\n  // and are collected in missingDependencies\n  const localFileNames = new Set<string>();\n\n  // imports that aren't defined in package.json or root package.json\n  // Now, this will also mark dependencies that were transient/nested,\n  // but I think that's the right choice; a dependency might remove it,\n  // even in a patch, and it'll break your code and you wouldn't know why.\n  const missingDependencies: Set<string> = new Set();\n\n  // get all the names of the files we outputted to make sure they're included\n  // in the missing dep check\n  const chunkOrAssetFileNames = new Set<string>(\n    output.map((chunkOfAsset) => chunkOfAsset.fileName),\n  );\n\n  for (const chunkOrAsset of output) {\n    if (chunkOrAsset.type === 'asset') {\n      // TODO: what should happen here?\n    } else {\n      // it's a 'chunk' of source code, let's analyse it\n      for (const imported of [\n        ...chunkOrAsset.imports,\n        ...chunkOrAsset.dynamicImports,\n      ]) {\n        // get the dependency (without references any inner modules)\n        const importedPath = imported.split('/');\n        const importedPackage =\n          // scoped package?\n          importedPath[0][0] === '@'\n            ? `${importedPath[0]}/${importedPath[1]}`\n            : // non-scoped\n              importedPath[0];\n\n        if (\n          importedPackage !== imported &&\n          packageNames.includes(importedPackage) &&\n          // it's fine if it's anything but a js file\n          extensions.includes(path.extname(imported))\n        ) {\n          // TODO: revisit this if and when we have support for multiple entrypoints\n          // TODO: add a line number and file name here\n          logger.error(\n            `cannot import a submodule ${imported} from ${importedPackage}`,\n          );\n          // TODO: This could probably be an error, but\n          // let's revisit it when we have a better story.\n        }\n\n        if (packageJsons[importedPackage]) {\n          // This means we're importing from a local workspace\n          // Let's collect the name and add it in the package.json\n          // we publish to the registry\n          // TODO: make sure local workspaces are NOT explicitly included in package.json\n          if (packageJsons[importedPackage].private !== true) {\n            localImports[importedPackage] = packageJsons[importedPackage]\n              .version as string;\n          } else {\n            throw new Error(\n              `referencing a private package: ${importedPackage}`,\n            ); // TODO - lineNo, filename\n          }\n        } else {\n          // remote\n          if (\n            // not mentioned in the local package.json\n            !packageJson.dependencies?.[importedPackage] &&\n            !packageJson.peerDependencies?.[importedPackage]\n          ) {\n            if (rootPackageJsonDependencies[importedPackage]) {\n              localImports[importedPackage] =\n                rootPackageJsonDependencies[importedPackage];\n            } else {\n              // not mentioned in the root package.json either, so\n              // let's collect its name and throw an error later\n              // TODO: if it's in root's dev dependencies, should throw a\n              // different kind of error\n              if (\n                !builtinModules.includes(importedPackage) &&\n                // In the case that the importedPackage is contained in the\n                // files outputted by the bundle write then the import name\n                // is a dynamic import which generated a file split. This is\n                // perfectly file since we know the file exists from the bundle\n                // write phase.\n                !chunkOrAssetFileNames.has(importedPackage)\n              ) {\n                // save filename to remove from missingDeps later\n                // if they exist there\n                localFileNames.add(chunkOrAsset.fileName);\n                missingDependencies.add(importedPackage);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (Object.keys(localImports).length > 0) {\n    logger.log('Adding dependencies to the generated package.json:');\n    Object.entries(localImports).forEach(([packageName, packageVersion]) => {\n      logger.log(`\\t${packageName}: ${chalk.green(packageVersion)}`);\n    });\n  }\n\n  // remove local filenames from missingDependencies\n  const missingDependenciesWithoutLocalFileNames = [\n    ...missingDependencies,\n  ].filter((dep) => !localFileNames.has(dep));\n\n  if (missingDependenciesWithoutLocalFileNames.length > 0) {\n    missingDependenciesWithoutLocalFileNames.forEach((missingImport) => {\n      logger.error(`  ${missingImport}`);\n    });\n    throw new Error(`Missing dependencies found.`);\n  }\n\n  // now actually write the bundles to disk\n  // TODO: write to disk in the above check itself to prevent this 2nd pass\n  const { output: buildOutput } = await bundle.write({\n    ...outputOptions,\n    ...(preserveModules\n      ? {\n          preserveModules: true,\n          dir: path.join(targetOutputDirectory, `${outputDirectory}-cjs`),\n        }\n      : {\n          file: path.join(\n            targetOutputDirectory,\n            `${outputDirectory}-cjs`,\n            paramCaseTarget + '.cjs.js',\n          ),\n        }),\n    format: 'cjs',\n    exports: 'auto',\n  });\n\n  await bundle.write({\n    ...outputOptions,\n    ...(preserveModules\n      ? {\n          preserveModules: true,\n          dir: path.join(targetOutputDirectory, `${outputDirectory}-es`),\n        }\n      : {\n          file: path.join(\n            targetOutputDirectory,\n            `${outputDirectory}-es`,\n            paramCaseTarget + '.es.js',\n          ),\n        }),\n    format: 'es',\n    exports: 'auto',\n  });\n\n  const outputPath = buildOutput[0].fileName;\n\n  // return the public facing package.json that we'll write to disk later\n  return {\n    ...packageJson,\n    main: preserveModules\n      ? path.posix.join(`${outputDirectory}-cjs`, outputPath)\n      : `${outputDirectory}-cjs/${paramCaseTarget + '.cjs.js'}`,\n    module: preserveModules\n      ? path.posix.join(`${outputDirectory}-es`, outputPath)\n      : `${outputDirectory}-es/${paramCaseTarget + '.es.js'}`,\n    typings: path.posix.join(\n      `${outputDirectory}-types`,\n      path.posix.relative('src', main).replace(/\\.tsx?$/, '.d.ts'),\n    ),\n    dependencies: {\n      ...packageJson.dependencies,\n      ...localImports,\n    },\n    files: distinct([\n      ...(packageJson.files || []),\n      'dist-cjs',\n      'dist-es',\n      'dist-types',\n      'README.md',\n    ]),\n  };\n}\n"],"file":"makeBundle.js"}
\ No newline at end of file
diff --git a/dist-cjs/test/config.js b/dist-cjs/test/config.js
index e749e90effe0a80a259a099ac4e3448a42a565ac..ad2ccb7811fff085bfe8b8da4569dbe176cdd2e6 100644
--- a/dist-cjs/test/config.js
+++ b/dist-cjs/test/config.js
@@ -46,7 +46,9 @@ function createJestConfig(cliOptions) {
     resetMocks: false,
     transform: {
       '^.+\\.(js|jsx|mjs|cjs)$': [require.resolve('babel-jest'), {
-        presets: [require.resolve('babel-preset-react-app')]
+        presets: [[require.resolve('babel-preset-react-app'), {
+          runtime: 'automatic'
+        }]]
       }],
       '^.+\\.(ts|tsx)$': require.resolve('ts-jest'),
       '^.+\\.(css|scss)$': require.resolve('jest-transform-stub'),
diff --git a/dist-cjs/test/config.js.map b/dist-cjs/test/config.js.map
index 9aeaabb4f187f14c0f9445efa09929bf1577a96b..90e180b5420018066dccdc796597f29babc64fcf 100644
--- a/dist-cjs/test/config.js.map
+++ b/dist-cjs/test/config.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/test/config.ts"],"names":["supportedOverrides","modulularSetUpFilesMap","setupFiles","setupFilesAfterEnv","createJestConfig","cliOptions","modularRoot","absolutePackagesPath","path","resolve","absoluteModularGlobalConfigsPath","jestConfig","defaults","displayName","resetMocks","transform","require","presets","transformIgnorePatterns","moduleNameMapper","watchPlugins","moduleFileExtensions","testRunner","testPathIgnorePatterns","rootDir","roots","testMatch","coverageDirectory","collectCoverageFrom","coveragePathIgnorePatterns","concat","globby","sync","cwd","map","f","join","rootPackageJson","fs","readJSONSync","packageJsonJest","jest","jestConfigFile","existsSync","Error","chalk","red","overrideKeys","Object","keys","unsupportedOverrides","filter","key","includes","setUpOptions","length","bold","mergedMapper","assign","isCi","globals","diagnostics","isolatedModules"],"mappings":"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","sourcesContent":["import * as fs from 'fs-extra';\nimport path from 'path';\nimport chalk from 'chalk';\nimport isCi from 'is-ci';\nimport globby from 'globby';\nimport type { Config } from '@jest/types';\nimport { defaults } from 'jest-config';\nimport getModularRoot from '../utils/getModularRoot';\nimport { ModularPackageJson } from '../utils/isModularType';\n\n// This list may change as we learn of options where flexibility would be valuable.\n// Based on react-scripts supported override options\nconst supportedOverrides = [\n  'collectCoverageFrom',\n  'coveragePathIgnorePatterns',\n  'coverageThreshold',\n  'moduleNameMapper',\n  'modulePathIgnorePatterns',\n  'testPathIgnorePatterns',\n  'testRunner',\n  'transformIgnorePatterns',\n];\n\ntype SetUpFilesMap = {\n  [name: string]: string;\n  setupFiles: string;\n  setupFilesAfterEnv: string;\n};\n\nconst modulularSetUpFilesMap: SetUpFilesMap = {\n  setupFiles: 'setupEnvironment',\n  setupFilesAfterEnv: 'setupTests',\n};\n\ninterface TestCliOptions {\n  reporters?: string[];\n  testResultsProcessor?: string;\n}\n\nexport function createJestConfig(\n  cliOptions: TestCliOptions,\n): Config.InitialOptions {\n  const modularRoot = getModularRoot();\n  const absolutePackagesPath = path.resolve(modularRoot, 'packages');\n  const absoluteModularGlobalConfigsPath = path.resolve(modularRoot, 'modular');\n\n  const jestConfig: Config.InitialOptions = {\n    ...defaults,\n    ...cliOptions,\n    displayName: 'test',\n    resetMocks: false,\n    transform: {\n      '^.+\\\\.(js|jsx|mjs|cjs)$': [\n        require.resolve('babel-jest'),\n        {\n          presets: [require.resolve('babel-preset-react-app')],\n        },\n      ],\n      '^.+\\\\.(ts|tsx)$': require.resolve('ts-jest'),\n      '^.+\\\\.(css|scss)$': require.resolve('jest-transform-stub'),\n      '.+\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n        require.resolve('jest-transform-stub'),\n    },\n    transformIgnorePatterns: [\n      '[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx|mjs|cjs|ts|tsx)$',\n      '^.+\\\\.module\\\\.(css|sass|scss)$',\n    ],\n    moduleNameMapper: {\n      '^.+\\\\.(css|styl|less|sass|scss|png|jpg|ttf|woff|woff2)$':\n        require.resolve('jest-transform-stub'),\n      '^react-native$': require.resolve('react-native-web'),\n    },\n    watchPlugins: [\n      require.resolve('jest-watch-typeahead/filename'),\n      require.resolve('jest-watch-typeahead/testname'),\n    ],\n    moduleFileExtensions: [\n      'web.js',\n      'js',\n      'web.ts',\n      'ts',\n      'web.tsx',\n      'tsx',\n      'json',\n      'web.jsx',\n      'jsx',\n      'node',\n    ],\n    testRunner: require.resolve('jest-circus/runner'),\n    testPathIgnorePatterns: ['/node_modules/', '/dist/'],\n    rootDir: absolutePackagesPath,\n    roots: ['<rootDir>'],\n    testMatch: ['<rootDir>/**/src/**/*.{spec,test}.{js,ts,tsx}'],\n    coverageDirectory: path.resolve(modularRoot, 'coverage'),\n    collectCoverageFrom: ['<rootDir>/**/src/**/*.{js,ts,tsx}', '!**/*.d.ts'],\n    coveragePathIgnorePatterns: [\n      '/__tests__/',\n      '/node_modules/',\n      'serviceWorker.ts',\n    ],\n    setupFiles: defaults.setupFiles.concat(\n      globby\n        .sync(`setupEnvironment.{js,ts,tsx}`, {\n          cwd: absoluteModularGlobalConfigsPath,\n        })\n        .map((f) => path.join(absoluteModularGlobalConfigsPath, f)),\n    ),\n    setupFilesAfterEnv: globby\n      .sync(`setupTests.{js,ts,tsx}`, {\n        cwd: absoluteModularGlobalConfigsPath,\n      })\n      .map((f) => path.join(absoluteModularGlobalConfigsPath, f)),\n  };\n\n  const rootPackageJson = fs.readJSONSync(\n    path.join(modularRoot, 'package.json'),\n  ) as ModularPackageJson;\n\n  const packageJsonJest = rootPackageJson?.jest as\n    | Config.InitialOptions\n    | undefined;\n\n  const jestConfigFile = fs.existsSync(\n    path.join(modularRoot, 'jest.config.js'),\n  );\n\n  if (jestConfigFile) {\n    throw new Error(\n      chalk.red(\n        '\\nWe detected a jest.config.js file in your root directory.\\n' +\n          'We read your jest options from package.json.\\n',\n        `\n        {\n          \"jest\": {}\n        }\n        `,\n      ),\n    );\n  }\n\n  if (packageJsonJest) {\n    const overrideKeys = Object.keys(packageJsonJest);\n    const unsupportedOverrides = overrideKeys.filter(\n      (key) => !supportedOverrides.includes(key),\n    );\n    const setUpOptions = unsupportedOverrides.filter(\n      (key) => key === 'setupFiles' || key === 'setupFilesAfterEnv',\n    );\n\n    if (setUpOptions.length) {\n      throw new Error(\n        chalk.red(\n          '\\n We detected options in your Jest configuration' +\n            ' that should be initialized in here: \\n\\n' +\n            setUpOptions\n              .map((key) =>\n                chalk.bold(\n                  '  \\u2022 ' +\n                    key +\n                    `: modular/${modulularSetUpFilesMap[key]}.{js,ts}`,\n                ),\n              )\n              .join('\\n'),\n          '\\n\\n We will load theses files for you. \\n',\n        ),\n      );\n    }\n\n    if (unsupportedOverrides.length) {\n      throw new Error(\n        chalk.red(\n          '\\nModular only supports overriding these Jest options:\\n\\n' +\n            supportedOverrides\n              .map((key) => chalk.bold('  \\u2022 ' + key))\n              .join('\\n') +\n            '\\n\\n' +\n            'These options are not supported by Modular:\\n\\n' +\n            unsupportedOverrides\n              .map((key) => chalk.bold('  \\u2022 ' + key))\n              .join('\\n'),\n          '\\n',\n        ),\n      );\n    }\n\n    const mergedMapper: Record<string, string | Array<string>> = {\n      ...jestConfig.moduleNameMapper,\n      ...packageJsonJest.moduleNameMapper,\n    };\n\n    Object.assign(jestConfig, {\n      ...packageJsonJest,\n      moduleNameMapper: mergedMapper,\n    });\n  }\n\n  // don't typecheck tests in CI\n  if (isCi) {\n    jestConfig.globals = {\n      'ts-jest': {\n        diagnostics: false,\n        isolatedModules: true,\n      },\n    };\n  }\n\n  return jestConfig;\n}\n"],"file":"config.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/test/config.ts"],"names":["supportedOverrides","modulularSetUpFilesMap","setupFiles","setupFilesAfterEnv","createJestConfig","cliOptions","modularRoot","absolutePackagesPath","path","resolve","absoluteModularGlobalConfigsPath","jestConfig","defaults","displayName","resetMocks","transform","require","presets","runtime","transformIgnorePatterns","moduleNameMapper","watchPlugins","moduleFileExtensions","testRunner","testPathIgnorePatterns","rootDir","roots","testMatch","coverageDirectory","collectCoverageFrom","coveragePathIgnorePatterns","concat","globby","sync","cwd","map","f","join","rootPackageJson","fs","readJSONSync","packageJsonJest","jest","jestConfigFile","existsSync","Error","chalk","red","overrideKeys","Object","keys","unsupportedOverrides","filter","key","includes","setUpOptions","length","bold","mergedMapper","assign","isCi","globals","diagnostics","isolatedModules"],"mappings":"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","sourcesContent":["import * as fs from 'fs-extra';\nimport path from 'path';\nimport chalk from 'chalk';\nimport isCi from 'is-ci';\nimport globby from 'globby';\nimport type { Config } from '@jest/types';\nimport { defaults } from 'jest-config';\nimport getModularRoot from '../utils/getModularRoot';\nimport { ModularPackageJson } from '../utils/isModularType';\n\n// This list may change as we learn of options where flexibility would be valuable.\n// Based on react-scripts supported override options\nconst supportedOverrides = [\n  'collectCoverageFrom',\n  'coveragePathIgnorePatterns',\n  'coverageThreshold',\n  'moduleNameMapper',\n  'modulePathIgnorePatterns',\n  'testPathIgnorePatterns',\n  'testRunner',\n  'transformIgnorePatterns',\n];\n\ntype SetUpFilesMap = {\n  [name: string]: string;\n  setupFiles: string;\n  setupFilesAfterEnv: string;\n};\n\nconst modulularSetUpFilesMap: SetUpFilesMap = {\n  setupFiles: 'setupEnvironment',\n  setupFilesAfterEnv: 'setupTests',\n};\n\ninterface TestCliOptions {\n  reporters?: string[];\n  testResultsProcessor?: string;\n}\n\nexport function createJestConfig(\n  cliOptions: TestCliOptions,\n): Config.InitialOptions {\n  const modularRoot = getModularRoot();\n  const absolutePackagesPath = path.resolve(modularRoot, 'packages');\n  const absoluteModularGlobalConfigsPath = path.resolve(modularRoot, 'modular');\n\n  const jestConfig: Config.InitialOptions = {\n    ...defaults,\n    ...cliOptions,\n    displayName: 'test',\n    resetMocks: false,\n    transform: {\n      '^.+\\\\.(js|jsx|mjs|cjs)$': [\n        require.resolve('babel-jest'),\n        {\n          presets: [\n            [\n              require.resolve('babel-preset-react-app'),\n              { runtime: 'automatic' },\n            ],\n          ],\n        },\n      ],\n      '^.+\\\\.(ts|tsx)$': require.resolve('ts-jest'),\n      '^.+\\\\.(css|scss)$': require.resolve('jest-transform-stub'),\n      '.+\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':\n        require.resolve('jest-transform-stub'),\n    },\n    transformIgnorePatterns: [\n      '[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx|mjs|cjs|ts|tsx)$',\n      '^.+\\\\.module\\\\.(css|sass|scss)$',\n    ],\n    moduleNameMapper: {\n      '^.+\\\\.(css|styl|less|sass|scss|png|jpg|ttf|woff|woff2)$':\n        require.resolve('jest-transform-stub'),\n      '^react-native$': require.resolve('react-native-web'),\n    },\n    watchPlugins: [\n      require.resolve('jest-watch-typeahead/filename'),\n      require.resolve('jest-watch-typeahead/testname'),\n    ],\n    moduleFileExtensions: [\n      'web.js',\n      'js',\n      'web.ts',\n      'ts',\n      'web.tsx',\n      'tsx',\n      'json',\n      'web.jsx',\n      'jsx',\n      'node',\n    ],\n    testRunner: require.resolve('jest-circus/runner'),\n    testPathIgnorePatterns: ['/node_modules/', '/dist/'],\n    rootDir: absolutePackagesPath,\n    roots: ['<rootDir>'],\n    testMatch: ['<rootDir>/**/src/**/*.{spec,test}.{js,ts,tsx}'],\n    coverageDirectory: path.resolve(modularRoot, 'coverage'),\n    collectCoverageFrom: ['<rootDir>/**/src/**/*.{js,ts,tsx}', '!**/*.d.ts'],\n    coveragePathIgnorePatterns: [\n      '/__tests__/',\n      '/node_modules/',\n      'serviceWorker.ts',\n    ],\n    setupFiles: defaults.setupFiles.concat(\n      globby\n        .sync(`setupEnvironment.{js,ts,tsx}`, {\n          cwd: absoluteModularGlobalConfigsPath,\n        })\n        .map((f) => path.join(absoluteModularGlobalConfigsPath, f)),\n    ),\n    setupFilesAfterEnv: globby\n      .sync(`setupTests.{js,ts,tsx}`, {\n        cwd: absoluteModularGlobalConfigsPath,\n      })\n      .map((f) => path.join(absoluteModularGlobalConfigsPath, f)),\n  };\n\n  const rootPackageJson = fs.readJSONSync(\n    path.join(modularRoot, 'package.json'),\n  ) as ModularPackageJson;\n\n  const packageJsonJest = rootPackageJson?.jest as\n    | Config.InitialOptions\n    | undefined;\n\n  const jestConfigFile = fs.existsSync(\n    path.join(modularRoot, 'jest.config.js'),\n  );\n\n  if (jestConfigFile) {\n    throw new Error(\n      chalk.red(\n        '\\nWe detected a jest.config.js file in your root directory.\\n' +\n          'We read your jest options from package.json.\\n',\n        `\n        {\n          \"jest\": {}\n        }\n        `,\n      ),\n    );\n  }\n\n  if (packageJsonJest) {\n    const overrideKeys = Object.keys(packageJsonJest);\n    const unsupportedOverrides = overrideKeys.filter(\n      (key) => !supportedOverrides.includes(key),\n    );\n    const setUpOptions = unsupportedOverrides.filter(\n      (key) => key === 'setupFiles' || key === 'setupFilesAfterEnv',\n    );\n\n    if (setUpOptions.length) {\n      throw new Error(\n        chalk.red(\n          '\\n We detected options in your Jest configuration' +\n            ' that should be initialized in here: \\n\\n' +\n            setUpOptions\n              .map((key) =>\n                chalk.bold(\n                  '  \\u2022 ' +\n                    key +\n                    `: modular/${modulularSetUpFilesMap[key]}.{js,ts}`,\n                ),\n              )\n              .join('\\n'),\n          '\\n\\n We will load theses files for you. \\n',\n        ),\n      );\n    }\n\n    if (unsupportedOverrides.length) {\n      throw new Error(\n        chalk.red(\n          '\\nModular only supports overriding these Jest options:\\n\\n' +\n            supportedOverrides\n              .map((key) => chalk.bold('  \\u2022 ' + key))\n              .join('\\n') +\n            '\\n\\n' +\n            'These options are not supported by Modular:\\n\\n' +\n            unsupportedOverrides\n              .map((key) => chalk.bold('  \\u2022 ' + key))\n              .join('\\n'),\n          '\\n',\n        ),\n      );\n    }\n\n    const mergedMapper: Record<string, string | Array<string>> = {\n      ...jestConfig.moduleNameMapper,\n      ...packageJsonJest.moduleNameMapper,\n    };\n\n    Object.assign(jestConfig, {\n      ...packageJsonJest,\n      moduleNameMapper: mergedMapper,\n    });\n  }\n\n  // don't typecheck tests in CI\n  if (isCi) {\n    jestConfig.globals = {\n      'ts-jest': {\n        diagnostics: false,\n        isolatedModules: true,\n      },\n    };\n  }\n\n  return jestConfig;\n}\n"],"file":"config.js"}
\ No newline at end of file
diff --git a/dist-cjs/typecheck.js b/dist-cjs/typecheck.js
index ef28f3b376629051fcd846b6a2f90738885036b9..12847cf2dc4828e2264d615f6dbf55467ecf0c8c 100644
--- a/dist-cjs/typecheck.js
+++ b/dist-cjs/typecheck.js
@@ -34,7 +34,7 @@ async function typecheck() {
     ...rest
   } = typescriptConfig;
   const tsConfig = { ...rest,
-    exclude: ['node_modules', 'bower_components', 'jspm_packages', 'tmp', '**/dist-types', '**/dist-cjs', '**/dist-es', 'dist'],
+    exclude: ['node_modules', 'bower_components', 'jspm_packages', 'tmp', '**/dist-types', '**/dist-cjs', '**/dist-es', 'dist', ...(Array.isArray(rest.exclude) ? rest.exclude : [])],
     compilerOptions: {
       noEmit: true
     }
diff --git a/dist-cjs/typecheck.js.map b/dist-cjs/typecheck.js.map
index 0e2aab05549eca0d4480bfd7ec39832c87f2c3d9..de615b347c842dd36e6c4043f5fe24e7891ea3a9 100644
--- a/dist-cjs/typecheck.js.map
+++ b/dist-cjs/typecheck.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../src/typecheck.ts"],"names":["typecheck","typescriptConfig","_compilerOptions","rest","tsConfig","exclude","compilerOptions","noEmit","diagnosticHost","getCurrentDirectory","getNewLine","ts","sys","newLine","getCanonicalFileName","file","useCaseSensitiveFileNames","toFileNameLowerCase","configParseResult","parseJsonConfigFileContent","errors","length","logger","error","Error","formatDiagnostics","program","createProgram","fileNames","options","fileNameLowerCaseRegExp","x","test","replace","toLowerCase","getSourceFiles","map","f","fileName","sort","forEach","debug","emitResult","emit","diagnostics","getPreEmitDiagnostics","concat","isCI","formatDiagnosticsWithColorAndContext","log","chalk","green"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,eAAeA,SAAf,GAA0C;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAuB,MAAM,kCAAnC;AAEA,QAAM;AAAEC,IAAAA,gBAAF;AAAoB,OAAGC;AAAvB,MAAgCF,gBAAtC;AAEA,QAAMG,QAAQ,GAAG,EACf,GAAGD,IADY;AAEfE,IAAAA,OAAO,EAAE,CACP,cADO,EAEP,kBAFO,EAGP,eAHO,EAIP,KAJO,EAKP,eALO,EAMP,aANO,EAOP,YAPO,EAQP,MARO,CAFM;AAYfC,IAAAA,eAAe,EAAE;AACfC,MAAAA,MAAM,EAAE;AADO;AAZF,GAAjB;AAiBA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,mBAAmB,EAAE,MAAc,8BADd;AAErBC,IAAAA,UAAU,EAAE,MAAcC,oBAAGC,GAAH,CAAOC,OAFZ;AAGrBC,IAAAA,oBAAoB,EAAGC,IAAD,IACpBJ,oBAAGC,GAAH,CAAOI,yBAAP,GAAmCD,IAAnC,GAA0CE,mBAAmB,CAACF,IAAD;AAJ1C,GAAvB,CAtBwC,CA6BxC;;AACA,QAAMG,iBAAiB,GAAGP,oBAAGQ,0BAAH,CACxBf,QADwB,EAExBO,oBAAGC,GAFqB,EAGxB,8BAHwB,CAA1B;;AAMA,MAAIM,iBAAiB,CAACE,MAAlB,CAAyBC,MAAzB,GAAkC,CAAtC,EAAyC;AACvCC,IAAAA,MAAM,CAACC,KAAP,CAAa,oCAAb;AACA,UAAM,IAAIC,KAAJ,CACJb,oBAAGc,iBAAH,CAAqBP,iBAAiB,CAACE,MAAvC,EAA+CZ,cAA/C,CADI,CAAN;AAGD;;AAED,QAAMkB,OAAO,GAAGf,oBAAGgB,aAAH,CACdT,iBAAiB,CAACU,SADJ,EAEdV,iBAAiB,CAACW,OAFJ,CAAhB,CA3CwC,CAgDxC;AACA;;;AACA,QAAMC,uBAAuB,GAAG,yCAAhC;;AAEA,WAASb,mBAAT,CAA6Bc,CAA7B,EAAwC;AACtC,WAAOD,uBAAuB,CAACE,IAAxB,CAA6BD,CAA7B,IACHA,CAAC,CAACE,OAAF,CAAUH,uBAAV,EAAmCC,CAAC,CAACG,WAAF,EAAnC,CADG,GAEHH,CAFJ;AAGD;;AAEDL,EAAAA,OAAO,CACJS,cADH,GAEGC,GAFH,CAEQC,CAAD,IAAOA,CAAC,CAACC,QAFhB,EAGGC,IAHH,GAIGC,OAJH,CAIYH,CAAD,IAAO;AACdf,IAAAA,MAAM,CAACmB,KAAP,CAAaJ,CAAb;AACD,GANH,EA1DwC,CAkExC;AACA;;AACA,QAAMK,UAAU,GAAGhB,OAAO,CAACiB,IAAR,EAAnB;;AAEA,QAAMC,WAAW,GAAGjC,oBACjBkC,qBADiB,CACKnB,OADL,EAEjBoB,MAFiB,CAEVJ,UAAU,CAACE,WAFD,CAApB;;AAIA,MAAIA,WAAW,CAACvB,MAAhB,EAAwB;AACtB,QAAI0B,aAAJ,EAAU;AACR;AACA,YAAM,IAAIvB,KAAJ,CAAUb,oBAAGc,iBAAH,CAAqBmB,WAArB,EAAkCpC,cAAlC,CAAV,CAAN;AACD,KAJqB,CAMtB;AACA;;;AACA,UAAM,IAAIgB,KAAJ,CACJb,oBAAGqC,oCAAH,CAAwCJ,WAAxC,EAAqDpC,cAArD,CADI,CAAN;AAGD,GArFuC,CAuFxC;;;AACAc,EAAAA,MAAM,CAAC2B,GAAP,CAAWC,eAAMC,KAAN,CAAY,yBAAZ,CAAX;AACD;;eAEc,mCAAqBnD,SAArB,C","sourcesContent":["import isCI from 'is-ci';\nimport ts from 'typescript';\nimport chalk from 'chalk';\nimport getPackageMetadata from './utils/getPackageMetadata';\nimport * as logger from './utils/logger';\nimport getModularRoot from './utils/getModularRoot';\nimport actionPreflightCheck from './utils/actionPreflightCheck';\n\nasync function typecheck(): Promise<void> {\n  const { typescriptConfig } = await getPackageMetadata();\n\n  const { _compilerOptions, ...rest } = typescriptConfig;\n\n  const tsConfig = {\n    ...rest,\n    exclude: [\n      'node_modules',\n      'bower_components',\n      'jspm_packages',\n      'tmp',\n      '**/dist-types',\n      '**/dist-cjs',\n      '**/dist-es',\n      'dist',\n    ],\n    compilerOptions: {\n      noEmit: true,\n    },\n  };\n\n  const diagnosticHost = {\n    getCurrentDirectory: (): string => getModularRoot(),\n    getNewLine: (): string => ts.sys.newLine,\n    getCanonicalFileName: (file: string): string =>\n      ts.sys.useCaseSensitiveFileNames ? file : toFileNameLowerCase(file),\n  };\n\n  // Parse all config except for compilerOptions\n  const configParseResult = ts.parseJsonConfigFileContent(\n    tsConfig,\n    ts.sys,\n    getModularRoot(),\n  );\n\n  if (configParseResult.errors.length > 0) {\n    logger.error('Failed to parse your tsconfig.json');\n    throw new Error(\n      ts.formatDiagnostics(configParseResult.errors, diagnosticHost),\n    );\n  }\n\n  const program = ts.createProgram(\n    configParseResult.fileNames,\n    configParseResult.options,\n  );\n\n  // Pulled from typescript's getCanonicalFileName logic\n  // eslint-disable-next-line  no-useless-escape\n  const fileNameLowerCaseRegExp = /[^\\u0130\\u0131\\u00DFa-z0-9\\\\/:\\-_\\. ]+/g;\n\n  function toFileNameLowerCase(x: string) {\n    return fileNameLowerCaseRegExp.test(x)\n      ? x.replace(fileNameLowerCaseRegExp, x.toLowerCase())\n      : x;\n  }\n\n  program\n    .getSourceFiles()\n    .map((f) => f.fileName)\n    .sort()\n    .forEach((f) => {\n      logger.debug(f);\n    });\n\n  // Does not emit files or typings but will add declaration diagnostics to our errors\n  // This will ensure that makeTypings will be successful in CI before actually attempting to build\n  const emitResult = program.emit();\n\n  const diagnostics = ts\n    .getPreEmitDiagnostics(program)\n    .concat(emitResult.diagnostics);\n\n  if (diagnostics.length) {\n    if (isCI) {\n      // formatDiagnostics will return a readable list of error messages, each with its own line\n      throw new Error(ts.formatDiagnostics(diagnostics, diagnosticHost));\n    }\n\n    // formatDiagnosticsWithColorAndContext will return a list of errors, each with its own line\n    // and provide an expanded snapshot of the line with the error\n    throw new Error(\n      ts.formatDiagnosticsWithColorAndContext(diagnostics, diagnosticHost),\n    );\n  }\n\n  // \"✓ Typecheck passed\"\n  logger.log(chalk.green('\\u2713 Typecheck passed'));\n}\n\nexport default actionPreflightCheck(typecheck);\n"],"file":"typecheck.js"}
\ No newline at end of file
+{"version":3,"sources":["../src/typecheck.ts"],"names":["typecheck","typescriptConfig","_compilerOptions","rest","tsConfig","exclude","Array","isArray","compilerOptions","noEmit","diagnosticHost","getCurrentDirectory","getNewLine","ts","sys","newLine","getCanonicalFileName","file","useCaseSensitiveFileNames","toFileNameLowerCase","configParseResult","parseJsonConfigFileContent","errors","length","logger","error","Error","formatDiagnostics","program","createProgram","fileNames","options","fileNameLowerCaseRegExp","x","test","replace","toLowerCase","getSourceFiles","map","f","fileName","sort","forEach","debug","emitResult","emit","diagnostics","getPreEmitDiagnostics","concat","isCI","formatDiagnosticsWithColorAndContext","log","chalk","green"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,eAAeA,SAAf,GAA0C;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAuB,MAAM,kCAAnC;AAEA,QAAM;AAAEC,IAAAA,gBAAF;AAAoB,OAAGC;AAAvB,MAAgCF,gBAAtC;AAEA,QAAMG,QAAQ,GAAG,EACf,GAAGD,IADY;AAEfE,IAAAA,OAAO,EAAE,CACP,cADO,EAEP,kBAFO,EAGP,eAHO,EAIP,KAJO,EAKP,eALO,EAMP,aANO,EAOP,YAPO,EAQP,MARO,EASP,IAAKC,KAAK,CAACC,OAAN,CAAcJ,IAAI,CAACE,OAAnB,IAA8BF,IAAI,CAACE,OAAnC,GAA6C,EAAlD,CATO,CAFM;AAafG,IAAAA,eAAe,EAAE;AACfC,MAAAA,MAAM,EAAE;AADO;AAbF,GAAjB;AAkBA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,mBAAmB,EAAE,MAAc,8BADd;AAErBC,IAAAA,UAAU,EAAE,MAAcC,oBAAGC,GAAH,CAAOC,OAFZ;AAGrBC,IAAAA,oBAAoB,EAAGC,IAAD,IACpBJ,oBAAGC,GAAH,CAAOI,yBAAP,GAAmCD,IAAnC,GAA0CE,mBAAmB,CAACF,IAAD;AAJ1C,GAAvB,CAvBwC,CA8BxC;;AACA,QAAMG,iBAAiB,GAAGP,oBAAGQ,0BAAH,CACxBjB,QADwB,EAExBS,oBAAGC,GAFqB,EAGxB,8BAHwB,CAA1B;;AAMA,MAAIM,iBAAiB,CAACE,MAAlB,CAAyBC,MAAzB,GAAkC,CAAtC,EAAyC;AACvCC,IAAAA,MAAM,CAACC,KAAP,CAAa,oCAAb;AACA,UAAM,IAAIC,KAAJ,CACJb,oBAAGc,iBAAH,CAAqBP,iBAAiB,CAACE,MAAvC,EAA+CZ,cAA/C,CADI,CAAN;AAGD;;AAED,QAAMkB,OAAO,GAAGf,oBAAGgB,aAAH,CACdT,iBAAiB,CAACU,SADJ,EAEdV,iBAAiB,CAACW,OAFJ,CAAhB,CA5CwC,CAiDxC;AACA;;;AACA,QAAMC,uBAAuB,GAAG,yCAAhC;;AAEA,WAASb,mBAAT,CAA6Bc,CAA7B,EAAwC;AACtC,WAAOD,uBAAuB,CAACE,IAAxB,CAA6BD,CAA7B,IACHA,CAAC,CAACE,OAAF,CAAUH,uBAAV,EAAmCC,CAAC,CAACG,WAAF,EAAnC,CADG,GAEHH,CAFJ;AAGD;;AAEDL,EAAAA,OAAO,CACJS,cADH,GAEGC,GAFH,CAEQC,CAAD,IAAOA,CAAC,CAACC,QAFhB,EAGGC,IAHH,GAIGC,OAJH,CAIYH,CAAD,IAAO;AACdf,IAAAA,MAAM,CAACmB,KAAP,CAAaJ,CAAb;AACD,GANH,EA3DwC,CAmExC;AACA;;AACA,QAAMK,UAAU,GAAGhB,OAAO,CAACiB,IAAR,EAAnB;;AAEA,QAAMC,WAAW,GAAGjC,oBACjBkC,qBADiB,CACKnB,OADL,EAEjBoB,MAFiB,CAEVJ,UAAU,CAACE,WAFD,CAApB;;AAIA,MAAIA,WAAW,CAACvB,MAAhB,EAAwB;AACtB,QAAI0B,aAAJ,EAAU;AACR;AACA,YAAM,IAAIvB,KAAJ,CAAUb,oBAAGc,iBAAH,CAAqBmB,WAArB,EAAkCpC,cAAlC,CAAV,CAAN;AACD,KAJqB,CAMtB;AACA;;;AACA,UAAM,IAAIgB,KAAJ,CACJb,oBAAGqC,oCAAH,CAAwCJ,WAAxC,EAAqDpC,cAArD,CADI,CAAN;AAGD,GAtFuC,CAwFxC;;;AACAc,EAAAA,MAAM,CAAC2B,GAAP,CAAWC,eAAMC,KAAN,CAAY,yBAAZ,CAAX;AACD;;eAEc,mCAAqBrD,SAArB,C","sourcesContent":["import isCI from 'is-ci';\nimport ts from 'typescript';\nimport chalk from 'chalk';\nimport getPackageMetadata from './utils/getPackageMetadata';\nimport * as logger from './utils/logger';\nimport getModularRoot from './utils/getModularRoot';\nimport actionPreflightCheck from './utils/actionPreflightCheck';\n\nasync function typecheck(): Promise<void> {\n  const { typescriptConfig } = await getPackageMetadata();\n\n  const { _compilerOptions, ...rest } = typescriptConfig;\n\n  const tsConfig = {\n    ...rest,\n    exclude: [\n      'node_modules',\n      'bower_components',\n      'jspm_packages',\n      'tmp',\n      '**/dist-types',\n      '**/dist-cjs',\n      '**/dist-es',\n      'dist',\n      ...((Array.isArray(rest.exclude) ? rest.exclude : []) as string[]),\n    ],\n    compilerOptions: {\n      noEmit: true,\n    },\n  };\n\n  const diagnosticHost = {\n    getCurrentDirectory: (): string => getModularRoot(),\n    getNewLine: (): string => ts.sys.newLine,\n    getCanonicalFileName: (file: string): string =>\n      ts.sys.useCaseSensitiveFileNames ? file : toFileNameLowerCase(file),\n  };\n\n  // Parse all config except for compilerOptions\n  const configParseResult = ts.parseJsonConfigFileContent(\n    tsConfig,\n    ts.sys,\n    getModularRoot(),\n  );\n\n  if (configParseResult.errors.length > 0) {\n    logger.error('Failed to parse your tsconfig.json');\n    throw new Error(\n      ts.formatDiagnostics(configParseResult.errors, diagnosticHost),\n    );\n  }\n\n  const program = ts.createProgram(\n    configParseResult.fileNames,\n    configParseResult.options,\n  );\n\n  // Pulled from typescript's getCanonicalFileName logic\n  // eslint-disable-next-line  no-useless-escape\n  const fileNameLowerCaseRegExp = /[^\\u0130\\u0131\\u00DFa-z0-9\\\\/:\\-_\\. ]+/g;\n\n  function toFileNameLowerCase(x: string) {\n    return fileNameLowerCaseRegExp.test(x)\n      ? x.replace(fileNameLowerCaseRegExp, x.toLowerCase())\n      : x;\n  }\n\n  program\n    .getSourceFiles()\n    .map((f) => f.fileName)\n    .sort()\n    .forEach((f) => {\n      logger.debug(f);\n    });\n\n  // Does not emit files or typings but will add declaration diagnostics to our errors\n  // This will ensure that makeTypings will be successful in CI before actually attempting to build\n  const emitResult = program.emit();\n\n  const diagnostics = ts\n    .getPreEmitDiagnostics(program)\n    .concat(emitResult.diagnostics);\n\n  if (diagnostics.length) {\n    if (isCI) {\n      // formatDiagnostics will return a readable list of error messages, each with its own line\n      throw new Error(ts.formatDiagnostics(diagnostics, diagnosticHost));\n    }\n\n    // formatDiagnosticsWithColorAndContext will return a list of errors, each with its own line\n    // and provide an expanded snapshot of the line with the error\n    throw new Error(\n      ts.formatDiagnosticsWithColorAndContext(diagnostics, diagnosticHost),\n    );\n  }\n\n  // \"✓ Typecheck passed\"\n  logger.log(chalk.green('\\u2713 Typecheck passed'));\n}\n\nexport default actionPreflightCheck(typecheck);\n"],"file":"typecheck.js"}
\ No newline at end of file
diff --git a/dist-cjs/utils/getAllWorkspaces.js b/dist-cjs/utils/getAllWorkspaces.js
index 4c84e8a45401be7f24346ffb75d7afc221953782..ccbae7ec86cc7e63a81b01099c1820ec045aec80 100644
--- a/dist-cjs/utils/getAllWorkspaces.js
+++ b/dist-cjs/utils/getAllWorkspaces.js
@@ -22,8 +22,8 @@ function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj &&

 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

-async function getYarnWorkspaceInfo(cwd) {
-  const result = await (0, _execa.default)('yarnpkg', ['--silent', 'workspaces', 'info'], {
+async function getYarnCommandOutput(cwd, args) {
+  const result = await (0, _execa.default)('yarnpkg', args, {
     cwd,
     reject: false,
     cleanup: true
@@ -40,11 +40,41 @@ async function getYarnWorkspaceInfo(cwd) {
   } // strip out ANSI color codes and escape characters


-  const strippedStd = (0, _stripAnsi.default)(stdout // there's an edge case where if there are no packages in the current workspace
+  return (0, _stripAnsi.default)(stdout);
+}
+
+async function getYarnV1WorkspaceInfo(cwd) {
+  // there's an edge case where if there are no packages in the current workspace
   // then this command returns an empty string and no JSON - so we have to default
   // to an empty directory which can be JSON parsed.
-  ) || '{}';
-  return JSON.parse(strippedStd);
+  const stdout = (await getYarnCommandOutput(cwd, ['--silent', 'workspaces', 'info'])) || '{}';
+  return JSON.parse(stdout);
+}
+
+async function getYarnV3WorkspaceInfo(cwd) {
+  const stdout = await getYarnCommandOutput(cwd, ['workspaces', 'list', '--json', '-v']);
+  return stdout.split(/\r?\n/).reduce((acc, workspaceString) => {
+    const {
+      name,
+      ...rest
+    } = JSON.parse(workspaceString);
+
+    if (rest.location !== '.') {
+      acc[name] = rest;
+    }
+
+    return acc;
+  }, {});
+}
+
+async function getYarnWorkspaceInfo(cwd) {
+  const stdout = await getYarnCommandOutput(cwd, ['--version']);
+
+  if (stdout.startsWith('1.')) {
+    return getYarnV1WorkspaceInfo(cwd);
+  }
+
+  return getYarnV3WorkspaceInfo(cwd);
 }

 function _getAllWorkspaces() {
diff --git a/dist-cjs/utils/getAllWorkspaces.js.map b/dist-cjs/utils/getAllWorkspaces.js.map
index 59d32eed0f21a0913ee29e6d5eb2f9af86690591..75ed3a6a983ec8b9962fb6d6c6988c04adcf6587 100644
--- a/dist-cjs/utils/getAllWorkspaces.js.map
+++ b/dist-cjs/utils/getAllWorkspaces.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/utils/getAllWorkspaces.ts"],"names":["getYarnWorkspaceInfo","cwd","result","reject","cleanup","exitCode","stdout","stderr","logger","error","Error","strippedStd","JSON","parse","_getAllWorkspaces","modularRoot","getAllWorkspaces"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAUO,eAAeA,oBAAf,CACLC,GADK,EAEoB;AACzB,QAAMC,MAAM,GAAG,MAAM,oBAAM,SAAN,EAAiB,CAAC,UAAD,EAAa,YAAb,EAA2B,MAA3B,CAAjB,EAAqD;AACxED,IAAAA,GADwE;AAExEE,IAAAA,MAAM,EAAE,KAFgE;AAGxEC,IAAAA,OAAO,EAAE;AAH+D,GAArD,CAArB;AAMA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,MAA+BL,MAArC;;AAEA,MAAIK,MAAM,IAAI,CAAC,CAACF,QAAhB,EAA0B;AACxBG,IAAAA,MAAM,CAACC,KAAP,CAAaF,MAAb;AACA,UAAM,IAAIG,KAAJ,CAAW,6CAAX,CAAN;AACD,GAZwB,CAczB;;;AACA,QAAMC,WAAW,GACf,wBACEL,MADF,CAEE;AACA;AACA;AAJF,OAKK,IANP;AAQA,SAAOM,IAAI,CAACC,KAAL,CAAWF,WAAX,CAAP;AACD;;AAED,SAASG,iBAAT,GAAsD;AACpD,QAAMC,WAAW,GAAG,8BAApB;AAEA,SAAOf,oBAAoB,CAACe,WAAD,CAA3B;AACD;;AAEM,MAAMC,gBAAgB,GAAG,sBAAQF,iBAAR,CAAzB","sourcesContent":["import execa from 'execa';\nimport memoize from './memoize';\nimport getModularRoot from './getModularRoot';\nimport * as logger from './logger';\nimport stripAnsi from 'strip-ansi';\n\ninterface YarnWorkspace {\n  location: string;\n  workspaceDependencies: string[];\n  mismatchedWorkspaceDependencies: string[];\n}\n\ntype YarnWorkspaces = Record<string, YarnWorkspace>;\n\nexport async function getYarnWorkspaceInfo(\n  cwd: string,\n): Promise<YarnWorkspaces> {\n  const result = await execa('yarnpkg', ['--silent', 'workspaces', 'info'], {\n    cwd,\n    reject: false,\n    cleanup: true,\n  });\n\n  const { exitCode, stdout, stderr } = result;\n\n  if (stderr && !!exitCode) {\n    logger.error(stderr);\n    throw new Error(`Failed to lookup yarn workspace information`);\n  }\n\n  // strip out ANSI color codes and escape characters\n  const strippedStd =\n    stripAnsi(\n      stdout,\n      // there's an edge case where if there are no packages in the current workspace\n      // then this command returns an empty string and no JSON - so we have to default\n      // to an empty directory which can be JSON parsed.\n    ) || '{}';\n\n  return JSON.parse(strippedStd) as YarnWorkspaces;\n}\n\nfunction _getAllWorkspaces(): Promise<YarnWorkspaces> {\n  const modularRoot = getModularRoot();\n\n  return getYarnWorkspaceInfo(modularRoot);\n}\n\nexport const getAllWorkspaces = memoize(_getAllWorkspaces);\n"],"file":"getAllWorkspaces.js"}
\ No newline at end of file
+{"version":3,"sources":["../../src/utils/getAllWorkspaces.ts"],"names":["getYarnCommandOutput","cwd","args","result","reject","cleanup","exitCode","stdout","stderr","logger","error","Error","getYarnV1WorkspaceInfo","JSON","parse","getYarnV3WorkspaceInfo","split","reduce","acc","workspaceString","name","rest","location","getYarnWorkspaceInfo","startsWith","_getAllWorkspaces","modularRoot","getAllWorkspaces"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAcA,eAAeA,oBAAf,CACEC,GADF,EAEEC,IAFF,EAGmB;AACjB,QAAMC,MAAM,GAAG,MAAM,oBAAM,SAAN,EAAiBD,IAAjB,EAAuB;AAC1CD,IAAAA,GAD0C;AAE1CG,IAAAA,MAAM,EAAE,KAFkC;AAG1CC,IAAAA,OAAO,EAAE;AAHiC,GAAvB,CAArB;AAMA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,MAA+BL,MAArC;;AAEA,MAAIK,MAAM,IAAI,CAAC,CAACF,QAAhB,EAA0B;AACxBG,IAAAA,MAAM,CAACC,KAAP,CAAaF,MAAb;AACA,UAAM,IAAIG,KAAJ,CAAW,6CAAX,CAAN;AACD,GAZgB,CAcjB;;;AACA,SAAO,wBAAUJ,MAAV,CAAP;AACD;;AAED,eAAeK,sBAAf,CAAsCX,GAAtC,EAA4E;AAC1E;AACA;AACA;AACA,QAAMM,MAAM,GACV,CAAC,MAAMP,oBAAoB,CAACC,GAAD,EAAM,CAAC,UAAD,EAAa,YAAb,EAA2B,MAA3B,CAAN,CAA3B,KACA,IAFF;AAIA,SAAOY,IAAI,CAACC,KAAL,CAAWP,MAAX,CAAP;AACD;;AAED,eAAeQ,sBAAf,CAAsCd,GAAtC,EAA4E;AAC1E,QAAMM,MAAM,GAAG,MAAMP,oBAAoB,CAACC,GAAD,EAAM,CAC7C,YAD6C,EAE7C,MAF6C,EAG7C,QAH6C,EAI7C,IAJ6C,CAAN,CAAzC;AAOA,SAAOM,MAAM,CAACS,KAAP,CAAa,OAAb,EAAsBC,MAAtB,CAA6B,CAACC,GAAD,EAAMC,eAAN,KAA0B;AAC5D,UAAM;AAAEC,MAAAA,IAAF;AAAQ,SAAGC;AAAX,QAAoBR,IAAI,CAACC,KAAL,CAAWK,eAAX,CAA1B;;AAEA,QAAIE,IAAI,CAACC,QAAL,KAAkB,GAAtB,EAA2B;AACzBJ,MAAAA,GAAG,CAACE,IAAD,CAAH,GAAYC,IAAZ;AACD;;AAED,WAAOH,GAAP;AACD,GARM,EAQJ,EARI,CAAP;AASD;;AAEM,eAAeK,oBAAf,CACLtB,GADK,EAEoB;AACzB,QAAMM,MAAM,GAAG,MAAMP,oBAAoB,CAACC,GAAD,EAAM,CAAC,WAAD,CAAN,CAAzC;;AAEA,MAAIM,MAAM,CAACiB,UAAP,CAAkB,IAAlB,CAAJ,EAA6B;AAC3B,WAAOZ,sBAAsB,CAACX,GAAD,CAA7B;AACD;;AAED,SAAOc,sBAAsB,CAACd,GAAD,CAA7B;AACD;;AAED,SAASwB,iBAAT,GAAsD;AACpD,QAAMC,WAAW,GAAG,8BAApB;AAEA,SAAOH,oBAAoB,CAACG,WAAD,CAA3B;AACD;;AAEM,MAAMC,gBAAgB,GAAG,sBAAQF,iBAAR,CAAzB","sourcesContent":["import execa from 'execa';\nimport memoize from './memoize';\nimport getModularRoot from './getModularRoot';\nimport * as logger from './logger';\nimport stripAnsi from 'strip-ansi';\n\ninterface YarnWorkspace {\n  location: string;\n  workspaceDependencies: string[];\n  mismatchedWorkspaceDependencies: string[];\n}\n\ninterface YarnWorkspaceV3 extends YarnWorkspace {\n  name: string;\n}\n\ntype YarnWorkspaces = Record<string, YarnWorkspace>;\n\nasync function getYarnCommandOutput(\n  cwd: string,\n  args: readonly string[],\n): Promise<string> {\n  const result = await execa('yarnpkg', args, {\n    cwd,\n    reject: false,\n    cleanup: true,\n  });\n\n  const { exitCode, stdout, stderr } = result;\n\n  if (stderr && !!exitCode) {\n    logger.error(stderr);\n    throw new Error(`Failed to lookup yarn workspace information`);\n  }\n\n  // strip out ANSI color codes and escape characters\n  return stripAnsi(stdout);\n}\n\nasync function getYarnV1WorkspaceInfo(cwd: string): Promise<YarnWorkspaces> {\n  // there's an edge case where if there are no packages in the current workspace\n  // then this command returns an empty string and no JSON - so we have to default\n  // to an empty directory which can be JSON parsed.\n  const stdout =\n    (await getYarnCommandOutput(cwd, ['--silent', 'workspaces', 'info'])) ||\n    '{}';\n\n  return JSON.parse(stdout) as YarnWorkspaces;\n}\n\nasync function getYarnV3WorkspaceInfo(cwd: string): Promise<YarnWorkspaces> {\n  const stdout = await getYarnCommandOutput(cwd, [\n    'workspaces',\n    'list',\n    '--json',\n    '-v',\n  ]);\n\n  return stdout.split(/\\r?\\n/).reduce((acc, workspaceString) => {\n    const { name, ...rest } = JSON.parse(workspaceString) as YarnWorkspaceV3;\n\n    if (rest.location !== '.') {\n      acc[name] = rest;\n    }\n\n    return acc;\n  }, {} as YarnWorkspaces);\n}\n\nexport async function getYarnWorkspaceInfo(\n  cwd: string,\n): Promise<YarnWorkspaces> {\n  const stdout = await getYarnCommandOutput(cwd, ['--version']);\n\n  if (stdout.startsWith('1.')) {\n    return getYarnV1WorkspaceInfo(cwd);\n  }\n\n  return getYarnV3WorkspaceInfo(cwd);\n}\n\nfunction _getAllWorkspaces(): Promise<YarnWorkspaces> {\n  const modularRoot = getModularRoot();\n\n  return getYarnWorkspaceInfo(modularRoot);\n}\n\nexport const getAllWorkspaces = memoize(_getAllWorkspaces);\n"],"file":"getAllWorkspaces.js"}
\ No newline at end of file
diff --git a/react-scripts/config/webpack.config.js b/react-scripts/config/webpack.config.js
index 72df253d2f507d680a7763eaca38dd391032e80d..5a67a1ae064c8f3741b338ed0a8d576a00da59cf 100644
--- a/react-scripts/config/webpack.config.js
+++ b/react-scripts/config/webpack.config.js
@@ -537,6 +537,9 @@ module.exports = function (webpackEnv) {
             : undefined,
         ),
       ),
+      new webpack.ProvidePlugin({
+        React: 'react',
+      }),
       // Inlines the webpack runtime script. This script is too small to warrant
       // a network request.
       // https://github.com/facebook/create-react-app/issues/5358
diff --git a/tsconfig.json b/tsconfig.json
index 9954e47a9f23b70d83b2182a59a14277a17aaaee..f8b4cc54590ba15fa6a75ccb289cad83784e6da2 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -15,7 +15,7 @@
     "resolveJsonModule": true,
     "isolatedModules": true,
     "noEmit": true,
-    "jsx": "react",
+    "jsx": "react-jsx",
     "sourceMap": true
   }
 }
diff --git a/dist-cjs/utils/getPackageMetadata.js b/dist-cjs/utils/getPackageMetadata.js
index 4f6555e3988e6a229a64e2c429107e0f62526d39..20f0095a556a1ce68ff586823d372887b79e3446 100644
--- a/dist-cjs/utils/getPackageMetadata.js
+++ b/dist-cjs/utils/getPackageMetadata.js
@@ -73,7 +73,7 @@ async function getPackageMetadata() {
   Object.assign(typescriptConfig, configObject, {
     // TODO: should probably include the original exclude in this
     exclude: distinct([// all TS test files, regardless whether co-located or in test/ etc
-    '**/*.stories.ts', '**/*.stories.tsx', '**/*.spec.ts', '**/*.test.ts', '**/*.e2e.ts', '**/*.spec.tsx', '**/*.test.tsx', '**/__tests__', '**/dist-cjs', '**/dist-es', '**/dist-types', // TS defaults below
+    '**/*.spec.ts', '**/*.test.ts', '**/*.e2e.ts', '**/*.spec.tsx', '**/*.test.tsx', '**/__tests__', '**/dist-cjs', '**/dist-es', '**/dist-types', // TS defaults below
     'node_modules', 'bower_components', 'jspm_packages', 'tmp', // Casting so that configObject.exclude is set to the correct typing
     // Since configObject is a index type all values are "any" implicitly.
     ...(configObject.exclude || [])])
diff --git a/dist-cjs/check/verifyWorkspaceDependencies.js b/dist-cjs/check/verifyWorkspaceDependencies.js
index 89555c78426ac0c1a8a00089980ef6f121a50be8..615a4c7ce750a7f4d8783441eeb09932c9bb3508 100644
--- a/dist-cjs/check/verifyWorkspaceDependencies.js
+++ b/dist-cjs/check/verifyWorkspaceDependencies.js
@@ -40,11 +40,6 @@ async function check() {
       valid = false;
     }

-    if (!packageInfo.location.startsWith('packages')) {
-      logger.error(`${packageName} is not located within the "/packages" directory in the repository, instead found "${packageInfo.location}"`);
-      valid = false;
-    }
-
     if (!(0, _isModularType.isValidModularType)(path.join(modularRoot, packageInfo.location))) {
       logger.error(`${packageName} at ${packageInfo.location} is not a valid modular type - Found ${(0, _isModularType.getModularType)(packageInfo.location)}`);
       valid = false;
diff --git a/react-scripts/config/paths.js b/react-scripts/config/paths.js
index 5587b7cda8a2841b4fd7c2950127cc3a102f3f19..7c286ff121ac946a46c82e401060da0e8594269c 100644
--- a/react-scripts/config/paths.js
+++ b/react-scripts/config/paths.js
@@ -88,6 +88,8 @@ module.exports = {
   appSrc: resolveApp('src'),
   modularSrc: [
     resolveModular('packages'),
+    resolveModular('playground'),
+    resolveModular('tooling'),
     resolveModular('node_modules/.modular'),
   ],
   appTsConfig: resolveApp('tsconfig.json'),
